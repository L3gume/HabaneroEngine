//
// FX Version: fx_5_0
//
// 2 local buffer(s)
//
cbuffer cbPerFrame
{
    float3  gEyePosW;                   // Offset:    0, size:   12
}

cbuffer cbPerObject
{
    float4x4 gWorld;                    // Offset:    0, size:   64
    float4x4 gWorldViewProj;            // Offset:   64, size:   64
}

//
// 1 groups(s)
//
fxgroup
{
    //
    // 1 technique(s)
    //
    technique11 Tess
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_input v0.xyz
                dcl_output o0.xyz
                dcl_temps 1
                //
                // Initial variable locations:
                //   v0.x <- vin.PosL.x; v0.y <- vin.PosL.y; v0.z <- vin.PosL.z; 
                //   o0.x <- <VS return value>.PosL.x; o0.y <- <VS return value>.PosL.y; o0.z <- <VS return value>.PosL.z
                //
                #line 26 "C:\Users\msukka1\Documents\HabaneroEngine\Habanero\jahbal\shaders\QuadTess.fx"
                mov r0.xyz, v0.xyzx  // r0.x <- vout.PosL.x; r0.y <- vout.PosL.y; r0.z <- vout.PosL.z
                
                #line 28
                mov o0.xyz, r0.xyzx
                ret 
                // Approximately 3 instruction slots used
                            
            };
            HullShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float3 gEyePosW;                   // Offset:    0 Size:    12
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldViewProj;           // Offset:   64 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                // cbPerObject                       cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TessFactor            0   x           0 QUADEDGE   float   x   
                // SV_TessFactor            1   x           1 QUADEDGE   float   x   
                // SV_TessFactor            2   x           2 QUADEDGE   float   x   
                // SV_TessFactor            3   x           3 QUADEDGE   float   x   
                // SV_InsideTessFactor      0   x           4  QUADINT   float   x   
                // SV_InsideTessFactor      1   x           5  QUADINT   float   x   
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Quadrilateral                           4
                //
                // Tessellation Output Primitive  Partitioning Type 
                // ------------------------------ ------------------
                // Clockwise Triangles            Integer           
                //
                hs_5_0
                hs_decls 
                dcl_input_control_point_count 4
                dcl_output_control_point_count 4
                dcl_tessellator_domain domain_quad
                dcl_tessellator_partitioning partitioning_integer
                dcl_tessellator_output_primitive output_triangle_cw
                dcl_hs_max_tessfactor l(64.000000)
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[1], immediateIndexed
                dcl_constantbuffer CB1[3], immediateIndexed
                hs_control_point_phase 
                dcl_input vOutputControlPointID
                dcl_input v[4][0].xyz
                dcl_output o0.xyz
                dcl_temps 1
                //
                // Initial variable locations:
                //   vOutputControlPointID.x <- i; 
                //   vPrim.x <- patchId; 
                //   o0.x <- <HS return value>.PosL.x; o0.y <- <HS return value>.PosL.y; o0.z <- <HS return value>.PosL.z; 
                //   v[0][0].x <- p[0].PosL.x; v[0][0].y <- p[0].PosL.y; v[0][0].z <- p[0].PosL.z; 
                //   v[1][0].x <- p[1].PosL.x; v[1][0].y <- p[1].PosL.y; v[1][0].z <- p[1].PosL.z; 
                //   v[2][0].x <- p[2].PosL.x; v[2][0].y <- p[2].PosL.y; v[2][0].z <- p[2].PosL.z; 
                //   v[3][0].x <- p[3].PosL.x; v[3][0].y <- p[3].PosL.y; v[3][0].z <- p[3].PosL.z
                //
                #line 80 "C:\Users\msukka1\Documents\HabaneroEngine\Habanero\jahbal\shaders\QuadTess.fx"
                mov r0.x, vOutputControlPointID
                mov r0.xyz, v[r0.x + 0][0].xyzx  // r0.x <- hout.PosL.x; r0.y <- hout.PosL.y; r0.z <- hout.PosL.z
                
                #line 82
                mov o0.xyz, r0.xyzx
                ret 
                hs_join_phase 
                dcl_input vicp[4][0].xyz
                dcl_output_siv o0.x, finalQuadUeq0EdgeTessFactor
                dcl_output_siv o1.x, finalQuadVeq0EdgeTessFactor
                dcl_output_siv o2.x, finalQuadUeq1EdgeTessFactor
                dcl_output_siv o3.x, finalQuadVeq1EdgeTessFactor
                dcl_output_siv o4.x, finalQuadUInsideTessFactor
                dcl_output_siv o5.x, finalQuadVInsideTessFactor
                dcl_temps 2
                
                #line 41
                add r0.xyz, vicp[1][0].xyzx, vicp[0][0].xyzx
                add r0.xyz, r0.xyzx, vicp[2][0].xyzx
                add r0.xyz, r0.xyzx, vicp[3][0].xyzx
                mul r0.xyz, r0.xyzx, l(0.250000, 0.250000, 0.250000, 0.000000)  // r0.x <- centerL.x; r0.y <- centerL.y; r0.z <- centerL.z
                
                #line 42
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb1[0].xyzw  // r1.x <- centerW.x
                dp4 r1.y, r0.xyzw, cb1[1].xyzw  // r1.y <- centerW.y
                dp4 r1.z, r0.xyzw, cb1[2].xyzw  // r1.z <- centerW.z
                
                #line 44
                mov r0.xyz, -cb0[0].xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                dp3 r0.x, r0.xyzx, r0.xyzx
                sqrt r0.x, r0.x  // r0.x <- d
                
                #line 47
                mov r0.y, l(1000.000000)  // r0.y <- d1
                
                #line 48
                mov r0.x, -r0.x
                add r0.x, r0.x, r0.y
                div r0.x, r0.x, l(800.000000)
                max r0.x, r0.x, l(0.000000)
                min r0.x, r0.x, l(1.000000)
                mul r0.w, r0.x, l(64.000000)  // r0.w <- tess
                
                #line 52
                mov r1.x, r0.w  // r1.x <- pt.EdgeTess[0]
                
                #line 53
                mov r1.y, r0.w  // r1.y <- pt.EdgeTess[1]
                
                #line 54
                mov r0.x, r0.w  // r0.x <- pt.EdgeTess[2]
                
                #line 55
                mov r0.y, r0.w  // r0.y <- pt.EdgeTess[3]
                
                #line 57
                mov r0.z, r0.w  // r0.z <- pt.InsideTess[0]
                
                #line 58
                mov r0.w, r0.w  // r0.w <- pt.InsideTess[1]
                
                #line 60
                mov r0.x, r0.x  // r0.x <- <ConstantHS return value>.EdgeTess[2]
                mov r0.y, r0.y  // r0.y <- <ConstantHS return value>.EdgeTess[3]
                mov r0.z, r0.z  // r0.z <- <ConstantHS return value>.InsideTess[0]
                mov r0.w, r0.w  // r0.w <- <ConstantHS return value>.InsideTess[1]
                mov r1.x, r1.x  // r1.x <- <ConstantHS return value>.EdgeTess[0]
                mov r1.y, r1.y  // r1.y <- <ConstantHS return value>.EdgeTess[1]
                min o0.x, r1.x, l(64.000000)
                min o1.x, r1.y, l(64.000000)
                min r0.xyzw, r0.xyzw, l(64.000000, 64.000000, 64.000000, 64.000000)
                mov o2.x, r0.x
                mov o3.x, r0.y
                mov o4.x, r0.z
                mov o5.x, r0.w
                ret 
                // Approximately 43 instruction slots used
                            
            };
            DomainShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:   64 Size:    64
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // cbPerObject                       cbuffer      NA          NA            cb0      1 
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TessFactor            0   x           0 QUADEDGE   float       
                // SV_TessFactor            1   x           1 QUADEDGE   float       
                // SV_TessFactor            2   x           2 QUADEDGE   float       
                // SV_TessFactor            3   x           3 QUADEDGE   float       
                // SV_InsideTessFactor      0   x           4  QUADINT   float       
                // SV_InsideTessFactor      1   x           5  QUADINT   float       
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Quadrilateral                           4
                //
                ds_5_0
                dcl_input_control_point_count 4
                dcl_tessellator_domain domain_quad
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[8], immediateIndexed
                dcl_input vDomain.xy
                dcl_input vicp[4][0].xyz
                dcl_output_siv o0.xyzw, position
                dcl_temps 3
                //
                // Initial variable locations:
                //   vpc0.x <- patchTess.EdgeTess[0]; 
                //   vpc1.x <- patchTess.EdgeTess[1]; 
                //   vpc2.x <- patchTess.EdgeTess[2]; 
                //   vpc3.x <- patchTess.EdgeTess[3]; 
                //   vpc4.x <- patchTess.InsideTess[0]; 
                //   vpc5.x <- patchTess.InsideTess[1]; 
                //   vDomain.x <- uv.x; vDomain.y <- uv.y; 
                //   o0.x <- <DS return value>.PosH.x; o0.y <- <DS return value>.PosH.y; o0.z <- <DS return value>.PosH.z; o0.w <- <DS return value>.PosH.w; 
                //   vicp[0][0].x <- quad[0].PosL.x; vicp[0][0].y <- quad[0].PosL.y; vicp[0][0].z <- quad[0].PosL.z; 
                //   vicp[1][0].x <- quad[1].PosL.x; vicp[1][0].y <- quad[1].PosL.y; vicp[1][0].z <- quad[1].PosL.z; 
                //   vicp[2][0].x <- quad[2].PosL.x; vicp[2][0].y <- quad[2].PosL.y; vicp[2][0].z <- quad[2].PosL.z; 
                //   vicp[3][0].x <- quad[3].PosL.x; vicp[3][0].y <- quad[3].PosL.y; vicp[3][0].z <- quad[3].PosL.z
                //
                #line 98 "C:\Users\msukka1\Documents\HabaneroEngine\Habanero\jahbal\shaders\QuadTess.fx"
                mov r0.xyz, -vicp[0][0].xyzx
                add r0.xyz, r0.xyzx, vicp[1][0].xyzx
                mul r0.xyz, r0.xyzx, vDomain.xxxx
                add r0.xyz, r0.xyzx, vicp[0][0].xyzx  // r0.x <- v1.x; r0.y <- v1.y; r0.z <- v1.z
                
                #line 99
                mov r1.xyz, -vicp[2][0].xyzx
                add r1.xyz, r1.xyzx, vicp[3][0].xyzx
                mul r1.xyz, r1.xyzx, vDomain.xxxx
                add r1.xyz, r1.xyzx, vicp[2][0].xyzx  // r1.x <- v2.x; r1.y <- v2.y; r1.z <- v2.z
                
                #line 100
                mov r2.xyz, -r0.xyzx
                add r1.xyz, r1.xyzx, r2.xyzx
                mul r1.xyz, r1.xyzx, vDomain.yyyy
                add r0.xyz, r0.xyzx, r1.xyzx  // r0.x <- p.x; r0.y <- p.y; r0.z <- p.z
                
                #line 105
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb0[4].xyzw  // r1.x <- dout.PosH.x
                dp4 r1.y, r0.xyzw, cb0[5].xyzw  // r1.y <- dout.PosH.y
                dp4 r1.z, r0.xyzw, cb0[6].xyzw  // r1.z <- dout.PosH.z
                dp4 r1.w, r0.xyzw, cb0[7].xyzw  // r1.w <- dout.PosH.w
                
                #line 107
                mov o0.xyzw, r1.xyzw
                ret 
                // Approximately 19 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_output o0.xyzw
                //
                // Initial variable locations:
                //   v0.x <- pin.PosH.x; v0.y <- pin.PosH.y; v0.z <- pin.PosH.z; v0.w <- pin.PosH.w; 
                //   o0.x <- <PS return value>.x; o0.y <- <PS return value>.y; o0.z <- <PS return value>.z; o0.w <- <PS return value>.w
                //
                #line 112 "C:\Users\msukka1\Documents\HabaneroEngine\Habanero\jahbal\shaders\QuadTess.fx"
                mov o0.xyzw, l(1.000000,0,0.505882,1.000000)
                ret 
                // Approximately 2 instruction slots used
                            
            };
        }

    }

}

