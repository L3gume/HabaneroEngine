//
// FX Version: fx_5_0
//
// 2 local buffer(s)
//
cbuffer cbPerFrame
{
    float4  gTessParams;                // Offset:    0, size:   16
    float3  gEyePosW;                   // Offset:   16, size:   12
}

cbuffer cbPerObject
{
    float4x4 gViewProj;                 // Offset:    0, size:   64
}

//
// 2 local object(s)
//
SamplerState samHeightMap
{
    Filter   = uint(MIN_MAG_LINEAR_MIP_POINT /* 20 */);
    AddressU = uint(CLAMP /* 3 */);
    AddressV = uint(CLAMP /* 3 */);
};
Texture2D gHeightMap;

//
// 1 groups(s)
//
fxgroup
{
    //
    // 1 technique(s)
    //
    technique11 Tess
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // samHeightMap                      sampler      NA          NA             s0      1 
                // gHeightMap                        texture  float4          2d             t0      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   x z 
                // TEXCOORD                 0   xy          1     NONE   float   xy  
                // TEXCOORD                 1   xy          2     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // TEXCOORD                 0   xy          1     NONE   float   xy  
                // TEXCOORD                 1     zw        1     NONE   float     zw
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input v0.xz
                dcl_input v1.xy
                dcl_input v2.xy
                dcl_output o0.xyz
                dcl_output o1.xy
                dcl_output o1.zw
                dcl_temps 2
                //
                // Initial variable locations:
                //   v0.x <- vin.posL.x; v0.y <- vin.posL.y; v0.z <- vin.posL.z; 
                //   v1.x <- vin.tex.x; v1.y <- vin.tex.y; 
                //   v2.x <- vin.boundsY.x; v2.y <- vin.boundsY.y; 
                //   o1.x <- <VS return value>.tex.x; o1.y <- <VS return value>.tex.y; o1.z <- <VS return value>.boundsY.x; o1.w <- <VS return value>.boundsY.y; 
                //   o0.x <- <VS return value>.posW.x; o0.y <- <VS return value>.posW.y; o0.z <- <VS return value>.posW.z
                //
                #line 60 "C:\Users\msukka1\Documents\HabaneroEngine\Habanero\jahbal\shaders\Terrain.fx"
                mov r0.xy, v0.xzxx  // r0.x <- vout.posW.x; r0.y <- vout.posW.z
                
                #line 61
                itof r0.z, l(0)
                sample_l_indexable(texture2d)(float,float,float,float) r0.z, v1.xyxx, t0.yzxw, s0, r0.z
                mov r0.z, r0.z  // r0.z <- vout.posW.y
                
                #line 63
                mov r1.xy, v1.xyxx  // r1.x <- vout.tex.x; r1.y <- vout.tex.y
                
                #line 64
                mov r1.zw, v2.xxxy  // r1.z <- vout.boundsY.x; r1.w <- vout.boundsY.y
                
                #line 66
                mov o1.xy, r1.xyxx
                mov o1.zw, r1.zzzw
                mov o0.xz, r0.xxyx
                mov o0.y, r0.z
                ret 
                // Approximately 11 instruction slots used
                            
            };
            HullShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4 gTessParams;                // Offset:    0 Size:    16
                //   float3 gEyePosW;                   // Offset:   16 Size:    12
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TessFactor            0   x           0 QUADEDGE   float   x   
                // SV_TessFactor            1   x           1 QUADEDGE   float   x   
                // SV_TessFactor            2   x           2 QUADEDGE   float   x   
                // SV_TessFactor            3   x           3 QUADEDGE   float   x   
                // SV_InsideTessFactor      0   x           4  QUADINT   float   x   
                // SV_InsideTessFactor      1   x           5  QUADINT   float   x   
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // TEXCOORD                 0   xy          1     NONE   float   xy  
                // TEXCOORD                 1     zw        1     NONE   float       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // TEXCOORD                 0   xy          1     NONE   float   xy  
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Quadrilateral                           4
                //
                // Tessellation Output Primitive  Partitioning Type 
                // ------------------------------ ------------------
                // Clockwise Triangles            Even Fractional   
                //
                hs_5_0
                hs_decls 
                dcl_input_control_point_count 4
                dcl_output_control_point_count 4
                dcl_tessellator_domain domain_quad
                dcl_tessellator_partitioning partitioning_fractional_even
                dcl_tessellator_output_primitive output_triangle_cw
                dcl_hs_max_tessfactor l(64.000000)
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[2], immediateIndexed
                hs_control_point_phase 
                dcl_input vOutputControlPointID
                dcl_input v[4][0].xyz
                dcl_input v[4][1].xy
                dcl_output o0.xyz
                dcl_output o1.xy
                dcl_temps 2
                //
                // Initial variable locations:
                //   vOutputControlPointID.x <- i; 
                //   vPrim.x <- patchId; 
                //   o1.x <- <HS return value>.tex.x; o1.y <- <HS return value>.tex.y; 
                //   o0.x <- <HS return value>.posW.x; o0.y <- <HS return value>.posW.y; o0.z <- <HS return value>.posW.z; 
                //   v[0][0].x <- p[0].posW.x; v[0][0].y <- p[0].posW.y; v[0][0].z <- p[0].posW.z; 
                //   v[0][1].x <- p[0].tex.x; v[0][1].y <- p[0].tex.y; v[0][1].z <- p[0].boundsY.x; v[0][1].w <- p[0].boundsY.y; 
                //   v[1][0].x <- p[1].posW.x; v[1][0].y <- p[1].posW.y; v[1][0].z <- p[1].posW.z; 
                //   v[1][1].x <- p[1].tex.x; v[1][1].y <- p[1].tex.y; v[1][1].z <- p[1].boundsY.x; v[1][1].w <- p[1].boundsY.y; 
                //   v[2][0].x <- p[2].posW.x; v[2][0].y <- p[2].posW.y; v[2][0].z <- p[2].posW.z; 
                //   v[2][1].x <- p[2].tex.x; v[2][1].y <- p[2].tex.y; v[2][1].z <- p[2].boundsY.x; v[2][1].w <- p[2].boundsY.y; 
                //   v[3][0].x <- p[3].posW.x; v[3][0].y <- p[3].posW.y; v[3][0].z <- p[3].posW.z; 
                //   v[3][1].x <- p[3].tex.x; v[3][1].y <- p[3].tex.y; v[3][1].z <- p[3].boundsY.x; v[3][1].w <- p[3].boundsY.y
                //
                #line 110 "C:\Users\msukka1\Documents\HabaneroEngine\Habanero\jahbal\shaders\Terrain.fx"
                mov r0.x, vOutputControlPointID
                mov r0.yzw, v[r0.x + 0][0].xxyz  // r0.y <- hout.posW.x; r0.z <- hout.posW.y; r0.w <- hout.posW.z
                
                #line 111
                mov r1.xy, v[r0.x + 0][1].xyxx  // r1.x <- hout.tex.x; r1.y <- hout.tex.y
                
                #line 113
                mov o0.xyz, r0.yzwy
                mov o1.xy, r1.xyxx
                ret 
                hs_join_phase 
                dcl_input vicp[4][0].xyz
                dcl_output_siv o0.x, finalQuadUeq0EdgeTessFactor
                dcl_output_siv o1.x, finalQuadVeq0EdgeTessFactor
                dcl_output_siv o2.x, finalQuadUeq1EdgeTessFactor
                dcl_output_siv o3.x, finalQuadVeq1EdgeTessFactor
                dcl_output_siv o4.x, finalQuadUInsideTessFactor
                dcl_output_siv o5.x, finalQuadVInsideTessFactor
                dcl_temps 6
                
                #line 81
                add r0.xyz, vicp[2][0].xyzx, vicp[0][0].xyzx
                mul r0.xyz, r0.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)  // r0.x <- e0.x; r0.y <- e0.y; r0.z <- e0.z
                
                #line 82
                add r1.xyz, vicp[1][0].xyzx, vicp[0][0].xyzx
                mul r1.xyz, r1.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)  // r1.x <- e1.x; r1.y <- e1.y; r1.z <- e1.z
                
                #line 83
                add r2.xyz, vicp[3][0].xyzx, vicp[1][0].xyzx
                mul r2.xyz, r2.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)  // r2.x <- e2.x; r2.y <- e2.y; r2.z <- e2.z
                
                #line 84
                add r3.xyz, vicp[3][0].xyzx, vicp[2][0].xyzx
                mul r3.xyz, r3.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)  // r3.x <- e3.x; r3.y <- e3.y; r3.z <- e3.z
                
                #line 85
                add r4.xyz, vicp[1][0].xyzx, vicp[0][0].xyzx
                add r4.xyz, r4.xyzx, vicp[2][0].xyzx
                add r4.xyz, r4.xyzx, vicp[3][0].xyzx
                mul r4.xyz, r4.xyzx, l(0.250000, 0.250000, 0.250000, 0.000000)  // r4.x <- c.x; r4.y <- c.y; r4.z <- c.z
                
                #line 87
                nop 
                mov r0.xyz, r0.xyzx
                
                #line 71
                mov r5.xyz, -cb0[1].xyzx
                add r0.xyz, r0.xyzx, r5.xyzx
                dp3 r0.x, r0.xyzx, r0.xyzx
                sqrt r0.x, r0.x  // r0.x <- d
                
                #line 73
                mov r0.y, -cb0[0].x
                add r0.x, r0.y, r0.x
                mov r0.y, -cb0[0].x
                add r0.y, r0.y, cb0[0].y
                div r0.x, r0.x, r0.y
                max r0.x, r0.x, l(0.000000)
                min r0.x, r0.x, l(1.000000)  // r0.x <- s
                
                #line 74
                itof r0.y, l(2)
                mov r0.z, -cb0[0].w
                add r0.z, r0.z, cb0[0].z
                mul r0.x, r0.z, r0.x
                add r0.x, r0.x, cb0[0].w
                log r0.y, r0.y
                mul r0.x, r0.y, r0.x
                exp r0.x, r0.x  // r0.x <- <calcTessFactor return value>
                
                #line 87
                mov r0.x, r0.x  // r0.x <- pt.EdgeTess[0]
                
                #line 88
                nop 
                mov r1.xyz, r1.xyzx
                
                #line 71
                mov r0.yzw, -cb0[1].xxyz
                add r0.yzw, r0.yyzw, r1.xxyz
                dp3 r0.y, r0.yzwy, r0.yzwy
                sqrt r0.y, r0.y  // r0.y <- d
                
                #line 73
                mov r0.z, -cb0[0].x
                add r0.y, r0.z, r0.y
                mov r0.z, -cb0[0].x
                add r0.z, r0.z, cb0[0].y
                div r0.y, r0.y, r0.z
                max r0.y, r0.y, l(0.000000)
                min r0.y, r0.y, l(1.000000)  // r0.y <- s
                
                #line 74
                itof r0.z, l(2)
                mov r0.w, -cb0[0].w
                add r0.w, r0.w, cb0[0].z
                mul r0.y, r0.w, r0.y
                add r0.y, r0.y, cb0[0].w
                log r0.z, r0.z
                mul r0.y, r0.z, r0.y
                exp r0.y, r0.y  // r0.y <- <calcTessFactor return value>
                
                #line 88
                mov r0.y, r0.y  // r0.y <- pt.EdgeTess[1]
                
                #line 89
                nop 
                mov r2.xyz, r2.xyzx
                
                #line 71
                mov r1.xyz, -cb0[1].xyzx
                add r1.xyz, r1.xyzx, r2.xyzx
                dp3 r0.z, r1.xyzx, r1.xyzx
                sqrt r0.z, r0.z  // r0.z <- d
                
                #line 73
                mov r0.w, -cb0[0].x
                add r0.z, r0.w, r0.z
                mov r0.w, -cb0[0].x
                add r0.w, r0.w, cb0[0].y
                div r0.z, r0.z, r0.w
                max r0.z, r0.z, l(0.000000)
                min r0.z, r0.z, l(1.000000)  // r0.z <- s
                
                #line 74
                itof r0.w, l(2)
                mov r1.x, -cb0[0].w
                add r1.x, r1.x, cb0[0].z
                mul r0.z, r0.z, r1.x
                add r0.z, r0.z, cb0[0].w
                log r0.w, r0.w
                mul r0.z, r0.w, r0.z
                exp r1.x, r0.z  // r1.x <- <calcTessFactor return value>
                
                #line 89
                mov r1.x, r1.x  // r1.x <- pt.EdgeTess[2]
                
                #line 90
                nop 
                mov r3.xyz, r3.xyzx
                
                #line 71
                mov r2.xyz, -cb0[1].xyzx
                add r2.xyz, r2.xyzx, r3.xyzx
                dp3 r0.z, r2.xyzx, r2.xyzx
                sqrt r0.z, r0.z  // r0.z <- d
                
                #line 73
                mov r0.w, -cb0[0].x
                add r0.z, r0.w, r0.z
                mov r0.w, -cb0[0].x
                add r0.w, r0.w, cb0[0].y
                div r0.z, r0.z, r0.w
                max r0.z, r0.z, l(0.000000)
                min r0.z, r0.z, l(1.000000)  // r0.z <- s
                
                #line 74
                itof r0.w, l(2)
                mov r2.x, -cb0[0].w
                add r2.x, r2.x, cb0[0].z
                mul r0.z, r0.z, r2.x
                add r0.z, r0.z, cb0[0].w
                log r0.w, r0.w
                mul r0.z, r0.w, r0.z
                exp r1.y, r0.z  // r1.y <- <calcTessFactor return value>
                
                #line 90
                mov r1.y, r1.y  // r1.y <- pt.EdgeTess[3]
                
                #line 92
                nop 
                mov r4.xyz, r4.xyzx
                
                #line 71
                mov r2.xyz, -cb0[1].xyzx
                add r2.xyz, r2.xyzx, r4.xyzx
                dp3 r0.z, r2.xyzx, r2.xyzx
                sqrt r0.z, r0.z  // r0.z <- d
                
                #line 73
                mov r0.w, -cb0[0].x
                add r0.z, r0.w, r0.z
                mov r0.w, -cb0[0].x
                add r0.w, r0.w, cb0[0].y
                div r0.z, r0.z, r0.w
                max r0.z, r0.z, l(0.000000)
                min r0.z, r0.z, l(1.000000)  // r0.z <- s
                
                #line 74
                itof r0.w, l(2)
                mov r2.x, -cb0[0].w
                add r2.x, r2.x, cb0[0].z
                mul r0.z, r0.z, r2.x
                add r0.z, r0.z, cb0[0].w
                log r0.w, r0.w
                mul r0.z, r0.w, r0.z
                exp r1.w, r0.z  // r1.w <- <calcTessFactor return value>
                mov r1.z, r1.w  // r1.z <- <calcTessFactor return value>
                
                #line 92
                mov r1.z, r1.z  // r1.z <- pt.InsideTess[0]
                
                #line 93
                mov r1.w, r1.w  // r1.w <- pt.InsideTess[1]
                
                #line 95
                mov r1.x, r1.x  // r1.x <- <ConstantHS return value>.EdgeTess[2]
                mov r1.y, r1.y  // r1.y <- <ConstantHS return value>.EdgeTess[3]
                mov r1.z, r1.z  // r1.z <- <ConstantHS return value>.InsideTess[0]
                mov r1.w, r1.w  // r1.w <- <ConstantHS return value>.InsideTess[1]
                mov r0.x, r0.x  // r0.x <- <ConstantHS return value>.EdgeTess[0]
                mov r0.y, r0.y  // r0.y <- <ConstantHS return value>.EdgeTess[1]
                min o0.x, r0.x, l(64.000000)
                min o1.x, r0.y, l(64.000000)
                min r0.xyzw, r1.xyzw, l(64.000000, 64.000000, 64.000000, 64.000000)  // r0.x <- <ConstantHS return value>.EdgeTess[2]; r0.y <- <ConstantHS return value>.EdgeTess[3]; r0.z <- <ConstantHS return value>.InsideTess[0]; r0.w <- <ConstantHS return value>.InsideTess[1]
                mov o2.x, r0.x
                mov o3.x, r0.y
                mov o4.x, r0.z
                mov o5.x, r0.w
                ret 
                // Approximately 144 instruction slots used
                            
            };
            DomainShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gViewProj;                // Offset:    0 Size:    64
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // samHeightMap                      sampler      NA          NA             s0      1 
                // gHeightMap                        texture  float4          2d             t0      1 
                // cbPerObject                       cbuffer      NA          NA            cb0      1 
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TessFactor            0   x           0 QUADEDGE   float       
                // SV_TessFactor            1   x           1 QUADEDGE   float       
                // SV_TessFactor            2   x           2 QUADEDGE   float       
                // SV_TessFactor            3   x           3 QUADEDGE   float       
                // SV_InsideTessFactor      0   x           4  QUADINT   float       
                // SV_InsideTessFactor      1   x           5  QUADINT   float       
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   x z 
                // TEXCOORD                 0   xy          1     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // TEXCOORD                 1     zw        2     NONE   float     zw
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Quadrilateral                           4
                //
                ds_5_0
                dcl_input_control_point_count 4
                dcl_tessellator_domain domain_quad
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[4], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input vDomain.xy
                dcl_input vicp[4][0].xz
                dcl_input vicp[4][1].xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xy
                dcl_output o2.zw
                dcl_temps 3
                //
                // Initial variable locations:
                //   vpc0.x <- patchTess.EdgeTess[0]; 
                //   vpc1.x <- patchTess.EdgeTess[1]; 
                //   vpc2.x <- patchTess.EdgeTess[2]; 
                //   vpc3.x <- patchTess.EdgeTess[3]; 
                //   vpc4.x <- patchTess.InsideTess[0]; 
                //   vpc5.x <- patchTess.InsideTess[1]; 
                //   vDomain.x <- uv.x; vDomain.y <- uv.y; 
                //   o2.x <- <DS return value>.tex.x; o2.y <- <DS return value>.tex.y; o2.z <- <DS return value>.tiledTex.x; o2.w <- <DS return value>.tiledTex.y; 
                //   o1.x <- <DS return value>.posW.x; o1.y <- <DS return value>.posW.y; o1.z <- <DS return value>.posW.z; 
                //   o0.x <- <DS return value>.posH.x; o0.y <- <DS return value>.posH.y; o0.z <- <DS return value>.posH.z; o0.w <- <DS return value>.posH.w; 
                //   vicp[0][0].x <- quad[0].posW.x; vicp[0][0].y <- quad[0].posW.y; vicp[0][0].z <- quad[0].posW.z; 
                //   vicp[0][1].x <- quad[0].tex.x; vicp[0][1].y <- quad[0].tex.y; 
                //   vicp[1][0].x <- quad[1].posW.x; vicp[1][0].y <- quad[1].posW.y; vicp[1][0].z <- quad[1].posW.z; 
                //   vicp[1][1].x <- quad[1].tex.x; vicp[1][1].y <- quad[1].tex.y; 
                //   vicp[2][0].x <- quad[2].posW.x; vicp[2][0].y <- quad[2].posW.y; vicp[2][0].z <- quad[2].posW.z; 
                //   vicp[2][1].x <- quad[2].tex.x; vicp[2][1].y <- quad[2].tex.y; 
                //   vicp[3][0].x <- quad[3].posW.x; vicp[3][0].y <- quad[3].posW.y; vicp[3][0].z <- quad[3].posW.z; 
                //   vicp[3][1].x <- quad[3].tex.x; vicp[3][1].y <- quad[3].tex.y
                //
                #line 122 "C:\Users\msukka1\Documents\HabaneroEngine\Habanero\jahbal\shaders\Terrain.fx"
                mov r0.xy, -vicp[0][0].xzxx
                add r0.xy, r0.xyxx, vicp[1][0].xzxx
                mul r0.xy, r0.xyxx, vDomain.xxxx
                add r0.xy, r0.xyxx, vicp[0][0].xzxx
                mov r0.zw, -vicp[2][0].xxxz
                add r0.zw, r0.zzzw, vicp[3][0].xxxz
                mul r0.zw, r0.zzzw, vDomain.xxxx
                add r0.zw, r0.zzzw, vicp[2][0].xxxz
                mov r1.xy, -r0.xyxx
                add r0.zw, r0.zzzw, r1.xxxy
                mul r0.zw, r0.zzzw, vDomain.yyyy
                add r0.xz, r0.zzwz, r0.xxyx  // r0.x <- dout.posW.x; r0.z <- dout.posW.z
                
                #line 127
                mov r1.xy, -vicp[0][1].xyxx
                add r1.xy, r1.xyxx, vicp[1][1].xyxx
                mul r1.xy, r1.xyxx, vDomain.xxxx
                add r1.xy, r1.xyxx, vicp[0][1].xyxx
                mov r1.zw, -vicp[2][1].xxxy
                add r1.zw, r1.zzzw, vicp[3][1].xxxy
                mul r1.zw, r1.zzzw, vDomain.xxxx
                add r1.zw, r1.zzzw, vicp[2][1].xxxy
                mov r2.xy, -r1.xyxx
                add r1.zw, r1.zzzw, r2.xxxy
                mul r1.zw, r1.zzzw, vDomain.yyyy
                add r1.xy, r1.zwzz, r1.xyxx  // r1.x <- dout.tex.x; r1.y <- dout.tex.y
                
                #line 132
                mul r1.zw, r1.xxxy, l(0.000000, 0.000000, 50.000000, 50.000000)  // r1.z <- dout.tiledTex.x; r1.w <- dout.tiledTex.y
                
                #line 134
                itof r2.x, l(0)
                sample_l_indexable(texture2d)(float,float,float,float) r0.y, r1.xyxx, t0.yxzw, s0, r2.x
                mov r0.y, r0.y  // r0.y <- dout.posW.y
                
                #line 136
                mov r0.w, l(1.000000)
                dp4 r2.x, r0.xyzw, cb0[0].xyzw  // r2.x <- dout.posH.x
                dp4 r2.y, r0.xyzw, cb0[1].xyzw  // r2.y <- dout.posH.y
                dp4 r2.z, r0.xyzw, cb0[2].xyzw  // r2.z <- dout.posH.z
                dp4 r2.w, r0.xyzw, cb0[3].xyzw  // r2.w <- dout.posH.w
                
                #line 138
                mov o0.xyzw, r2.xyzw
                mov o2.xy, r1.xyxx
                mov o2.zw, r1.zzzw
                mov o1.xyz, r0.xyzx
                ret 
                // Approximately 38 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float       
                // TEXCOORD                 0   xy          2     NONE   float       
                // TEXCOORD                 1     zw        2     NONE   float       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_output o0.xyzw
                //
                // Initial variable locations:
                //   v0.x <- pin.posH.x; v0.y <- pin.posH.y; v0.z <- pin.posH.z; v0.w <- pin.posH.w; 
                //   v1.x <- pin.posW.x; v1.y <- pin.posW.y; v1.z <- pin.posW.z; 
                //   v2.x <- pin.tex.x; v2.y <- pin.tex.y; v2.z <- pin.tiledTex.x; v2.w <- pin.tiledTex.y; 
                //   o0.x <- <PS return value>.x; o0.y <- <PS return value>.y; o0.z <- <PS return value>.z; o0.w <- <PS return value>.w
                //
                #line 143 "C:\Users\msukka1\Documents\HabaneroEngine\Habanero\jahbal\shaders\Terrain.fx"
                mov o0.xyzw, l(1.000000,1.000000,1.000000,1.000000)
                ret 
                // Approximately 2 instruction slots used
                            
            };
        }

    }

}

